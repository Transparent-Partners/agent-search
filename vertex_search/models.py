"""
Response models for Vertex AI Search API.
"""

from dataclasses import dataclass
from typing import List, Optional, Dict, Any
from datetime import datetime


@dataclass
class SearchResult:
    """Represents a search result from Vertex AI Search."""
    
    title: str
    content: str
    uri: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    score: Optional[float] = None
    
    def __str__(self) -> str:
        return f"SearchResult(title='{self.title}', score={self.score})"


@dataclass
class AnswerResponse:
    """Represents an answer generated by Vertex AI Search."""
    
    answer: str
    related_questions: List[str]
    search_results: List[SearchResult]
    session_id: Optional[str] = None
    query_id: Optional[str] = None
    
    def __str__(self) -> str:
        return f"AnswerResponse(answer='{self.answer[:100]}...', questions={len(self.related_questions)})"


@dataclass
class SessionInfo:
    """Represents session information for conversational search."""
    
    session_id: str
    user_pseudo_id: Optional[str] = None
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    state: str = "IN_PROGRESS"
    turns: List[Dict[str, Any]] = None
    
    def __post_init__(self):
        if self.turns is None:
            self.turns = []
    
    def __str__(self) -> str:
        return f"SessionInfo(id='{self.session_id}', state='{self.state}', turns={len(self.turns)})"


@dataclass
class SearchRequest:
    """Configuration for search requests."""
    
    query: str
    page_size: int = 10
    query_expansion: bool = True
    spell_correction: bool = True
    language_code: str = "en-US"
    time_zone: str = "America/Denver"
    user_pseudo_id: Optional[str] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for API request."""
        return {
            "query": self.query,
            "pageSize": self.page_size,
            "queryExpansionSpec": {"condition": "AUTO"} if self.query_expansion else None,
            "spellCorrectionSpec": {"mode": "AUTO"} if self.spell_correction else None,
            "languageCode": self.language_code,
            "userInfo": {
                "timeZone": self.time_zone,
                "userPseudoId": self.user_pseudo_id
            } if self.user_pseudo_id else {"timeZone": self.time_zone}
        }


@dataclass
class AnswerRequest:
    """Configuration for answer generation requests."""
    
    query: str
    session_id: Optional[str] = None
    query_id: Optional[str] = None
    enable_related_questions: bool = True
    ignore_adversarial_query: bool = True
    ignore_non_answer_seeking_query: bool = False
    ignore_low_relevance_query: bool = False
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for API request."""
        request_data = {
            "query": {
                "text": self.query,
                "queryId": self.query_id
            },
            "relatedQuestionsSpec": {"enable": self.enable_related_questions},
            "answerGenerationSpec": {
                "ignoreAdversarialQuery": self.ignore_adversarial_query,
                "ignoreNonAnswerSeekingQuery": self.ignore_non_answer_seeking_query,
                "ignoreLowRelevanceQuery": self.ignore_low_relevance_query
            }
        }
        
        if self.session_id:
            request_data["session"] = self.session_id
            
        return request_data
